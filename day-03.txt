Question 1. How to compare two json have the same properties without order

Answer:- Comparing two JSON objects to check if they have the same properties, regardless of the order of those properties, can be achieved in various programming languages. Here's how you can do it in JavaScript, which naturally handles JSON:

Approach
The idea is to recursively compare each property of the two JSON objects to ensure that:

Both objects have the same set of keys.
Corresponding values for each key are equal, considering:
If the values are primitives (string, number, boolean), they are directly compared.
If the values are objects or arrays, the comparison is done recursively.
============================================================================================================================================


Programming Example :-
=============================
function deepEqual(obj1, obj2) {
    if (obj1 === obj2) {
        return true;
    }

    if (typeof obj1 !== 'object' || typeof obj2 !== 'object' || obj1 == null || obj2 == null) {
        return false;
    }

    const keys1 = Object.keys(obj1);
    const keys2 = Object.keys(obj2);

    if (keys1.length !== keys2.length) {
        return false;
    }

    for (let key of keys1) {
        if (!keys2.includes(key)) {
            return false;
        }

        if (typeof obj1[key] === 'object' && typeof obj2[key] === 'object') {
            if (!deepEqual(obj1[key], obj2[key])) {
                return false;
            }
        } else if (obj1[key] !== obj2[key]) {
            return false;
        }
    }

    return true;
}

// Example usage:
const obj1 = { name: "Person 1", age: 5 };
const obj2 = { age: 5, name: "Person 1" };

console.log(deepEqual(obj1, obj2));






===========================================================================================================================
Question 2. Use the rest country api url that is https://restcountries.com/v3.1/all and display all the country flag in the console

============================================================================================================================
Answer :- 
==========================
fetch('https://restcountries.com/v3.1/all')
    .then(response => response.json())
    .then(data => {
        data.forEach(country => {
            console.log(`${country.name.common}: ${country.flags.svg}`);
        });
    })
    .catch(error => {
        console.error('Error fetching data: ', error);
    });
    ===========================================================================================================




Question 3. :- Use the same rest country and print all the country names, regions, sub-regions, populations
==============================================================================================================
Answer :- 
===================================================================================================
async function fetchCountries() {
  try {
    const response = await fetch('https://restcountries.com/v3.1/all');
    if (!response.ok) {
      throw new Error(`HTTP error! Status: ${response.status}`);
    }
    const countries = await response.json();

    countries.forEach(country => {
      const name = country.name.common; // Accessing the common name of the country
      const region = country.region; // Accessing the region
      const subregion = country.subregion || 'No subregion'; // Accessing the subregion, providing a fallback if it doesn't exist
      const population = country.population; // Accessing the population

      console.log(`Country: ${name}, Region: ${region}, Sub-Region: ${subregion}, Population: ${population}`);
    });
  } catch (error) {
    console.error("Failed to fetch countries:", error);
  }
}

fetchCountries();
